% comparador

m = 2207.6;
Cd = 1.6;
A_area = 13.29;
rho = 0.02;
g = 3.721;
ve = [0; 0; 89];
vze = ve(3);
J = diag([5027.77, 4513.67, 3565.88]);

S_ve = [0, -ve(3), ve(2); ve(3), 0, -ve(1); -ve(2), ve(1), 0];
neg_S_ve = -S_ve;

Gravity = [0, g, 0; -g, 0, 0; 0, 0, 0];
Drag = [0, 0, 0; 0, 0, 0; 0, 0, -(1/m)*Cd*rho*A_area*vze^2];

Z3 = zeros(3);
I3 = eye(3);
A = [Z3, I3, neg_S_ve, Z3;
     Z3, Drag, Gravity, S_ve;
     Z3, Z3, Z3, I3;
     Z3, Z3, Z3, Z3];

fp1 = [0; sqrt(2)/2 * (-2667); sqrt(2)/2 * (-2667)];
fp2 = [0; sqrt(2)/2 * (-2667); sqrt(2)/2 * (-2667)];
fp3 = [0; sqrt(2)/2 * 2667; sqrt(2)/2 * (-2667)];
fp4 = [0; sqrt(2)/2 * 2667; sqrt(2)/2 * (-2667)];

np1 = [1.84 * sqrt(2)/2 * (-2667); 1.84 * sqrt(2)/2 * 2667; 1.84 * sqrt(2)/2 * (-2667)];
np2 = [1.84 * sqrt(2)/2 * (-2667); 1.84 * sqrt(2)/2 * (-2667); 1.84 * sqrt(2)/2 * 2667];
np3 = [1.84 * sqrt(2)/2 * 2667; 1.84 * sqrt(2)/2 * (-2667); 1.84 * sqrt(2)/2 * (-2667)];
np4 = [1.84 * sqrt(2)/2 * 2667; 1.84 * sqrt(2)/2 * 2667; 1.84 * sqrt(2)/2 * 2667];

Z3x1 = zeros(3, 1);
B = [Z3x1, Z3x1, Z3x1, Z3x1;
     fp1/m, fp2/m, fp3/m, fp4/m;
     Z3x1, Z3x1, Z3x1, Z3x1;
     inv(J) * np1, inv(J) * np2, inv(J) * np3, inv(J) * np4];

C = eye(4,12);

D = zeros(4,4);

% compute transfer function
G = tf(ss(A,B,C,D));

Q = diag([10, 10, 15, 5, 5, 8, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]);
R = diag([1, 1, 1, 1]);

% Calcular o ganho do controlador LQR
[K, S, e] = lqr(A, B, Q, R);

% Exibir o ganho do controlador
disp('Ganho do controlador LQR (K):');
disp(K);

% dot_x = A x + B1 w + B2 u
% z = C1 x + D11 w + D12 u
% v = C2 x + D21 w + D22 u
% x = [p;v;T]
% u = T_set
% w = r = [p_ref;v_ref;T_ref]
A0 = A;
B1 = zeros(12,12);
B2= B;
% z = [W1*x;W2*u] = [W1;0]*x + [0;W2]*u % Similar performance output to that of LQR (static weights)
W1 = sqrt(Q);
W2 = sqrt(R);
C1 = W1;
D11 = zeros(12,12);
D12 = [zeros(8,4);W2];
% v = r - x = -eye(3)*x + eye(3)*r = C2*x + D21*w + 0*u
C2 = -eye(12);
D21 = eye(12);
D22 = zeros(12,4);
% total system:
% dot_x = A0 x + B0 [w;u]
% [z;v] = C0 x + D0 [w;u]
B0 = [ B1 B2 ];
C0 = [ C1
       C2 ];
D0 = [D11 D12
      D21 D22];
P = ss(A0,B0,C0,D0);
nmeas = 12;
ncont = 4;

% tests on P:
nx = size(A0,1);
if (nx - rank(ctrb(A0,B2))) > 0, disp('A1.1 on P: system uncontrolable'); else disp('A1.1 on P: OK'); end
if (nx - rank(obsv(A0,C2))) > 0, disp('A1.2 on P: system unobservable'); else disp('A1.2 on P: OK'); end
if (size(D12,2) - rank(D12)) > 0, disp('A2.1 on P: D12 is column rank deficient'); else disp('A2.1 on P: OK'); end
if (size(D21,1) - rank(D21)) > 0, disp('A2.2 on P: D21 is row rank deficient'); else disp('A2.1 on P: OK'); end
syms w real; 
Aux1 = [A0 - j*w*eye(size(A0)) , B2 ; C1 , D12];
if (size(Aux1,2) - rank(Aux1)) > 0,  disp('A3 on P: matrix is column rank deficient'); else disp('A3 on P: OK'); end
Aux2 = [A0 - j*w*eye(size(A0)) , B1 ; C2 , D21];
if (size(Aux2,1) - rank(Aux2)) > 0,  disp('A4 on P: matrix is column rank deficient'); else disp('A4 on P: OK'); end
[Kinf,CLinf,gammainf,info_inf] = hinfsyn(P,nmeas,ncont);
poles_CLinf = pole(CLinf);
if any(real(poles_CLinf) >= 0), disp('CL system with Hinf controller not stable'); else, disp('CL system with Hinf controller is stable'); end

% Exibir o ganho H-infinito
disp('Ganho H-infinito (γ_inf):');
disp(gammainf);

% Exibir estrutura do controlador K
disp('Estrutura do controlador K:');
disp(Kinf)

% select controller: (run code more times to compare controllers; close figure to restart)
i_ctr = 1; % LQR controller
% i_ctr = 2; % Hinf controller

% simulate controlled system
Dt = 0.01;
t = 0:Dt:30;
NSim = length(t);
r = zeros(2, NSim); % referência
nx = 12;
nu = 4;
x = zeros(size(A, 1), length(t));
xu = zeros(size(A, 1), length(t));
u = zeros(size(B, 2), length(t));
x(:,1) = [10; 1; zeros(10, 1)]; % condição inicial

for k = 1:NSim
    % Obter medições
    y(:,k) = C * x(:,k);
% get control action:
    switch i_ctr
        case 1 % LQR controller:
	    u(:,k) = -K * [(y(1:2,k) - r(:,k));x(3:nx,k)];
        case 2 % Hinf controller:
            v = -[(r(:,k)-y(1:2,k));-x(3:nx,k)];
            u(:,k) = Kinf.C*v; % approximation for LQR-like performance of Hin
end

 % simulate system:
    x_dot = A*x(:,k) + B*u(:,k); % system derivatives
    xp = x(:,k) + Dt*x_dot; % integrate system state
    if k < NSim
        x(:,k+1) = xp;
    end

end

% Plotar os resultados
figure(9041002);
plot(t, u);
grid on;
hold on;
xlabel('$$t [s]$$', 'Interpreter', 'latex');
ylabel('$$u(t)$$', 'Interpreter', 'latex');
legend('$$u_1$$', '$$u_2$$', 'Interpreter', 'latex');

figure(9041003);
plot(t, y, t, r);
grid on;
hold on;
xlabel('$$t [s]$$', 'Interpreter', 'latex');
legend('$$y_1$$', '$$r_1$$', '$$y_2$$', '$$r_2$$', 'Interpreter', 'latex');



